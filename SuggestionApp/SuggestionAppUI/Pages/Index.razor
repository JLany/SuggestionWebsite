@page "/"
@inject ICategoryRepository categoryRepo
@inject IStatusRepository statusRepo
@inject IPostRepository postRepo
@inject NavigationManager navigation
@inject ProtectedSessionStorage sessionStorage

<h1>Development Suggestions</h1>

<div>
	<button>Suggest</button>
</div>

<div>
	<div>@_posts?.Count Suggestions</div>
	<div>
		<button @onclick="(() => OrderPostsByAsync(SortOption.ByNew))">New</button>
		<button @onclick="(() => OrderPostsByAsync(SortOption.ByPopular))">Popular</button>
	</div>
	<div>
		<input type="text" placeholder="Search" aria-label="Search Box"
			@oninput="((text) => OnSearchBarInputAsync((string)text.Value))" />
	</div>
</div>

<div>
	<div>
		@if (_posts is not null)
		{
			<Virtualize Items="@_posts" Context="post" OverscanCount="10">
				<div>
					<div>
						<div>@UpvoteTopText(post)</div>
						<span class="oi oi-caret-top"></span>
						<div>@UpvoteBottomText(post)</div>
					</div>
					<div>
						<div @onclick="(() => OpenPostDetails(post))">@post.Title</div>
						<div>
							<div @onclick="(() => OpenPostDetails(post))">
								@post.Category?.CategoryName
							</div>
						</div>
					</div>
					<div>
						<div>@post.Status?.StatusName</div>
					</div>
				</div>

			</Virtualize>
		}
	</div>

	<div>
		@if (_categories is not null)
		{
			<div>
				<span>Category</span>
				<div @onclick="(() => OnCategoryClickAsync(CategoryModel.All))">All</div>
				@foreach (var c in _categories)
				{
					<div @onclick="(() => OnCategoryClickAsync(c.CategoryName))">@c.CategoryName</div>
				}
			</div>
		}

		@if (_statuses is not null)
		{
			<div>
				<span>Status</span>
				<div @onclick="(() => OnStatusClickAsync(StatusModel.None))">All</div>
				@foreach (var s in _statuses)
				{
					<div @onclick="(() => OnStatusClickAsync(s.StatusName))">@s.StatusName</div>
				}
			</div>
		}
	</div>
</div>

@code {
	private List<CategoryModel> _categories;
	private List<StatusModel> _statuses;
	private List<PostModel> _posts;

	private string _selectedCategory = CategoryModel.All;
	private string _selectedStatus = StatusModel.None;
	private string _searchText = "";
	private SortOption _sortOption = SortOption.ByNew;

	protected override async Task OnInitializedAsync()
	{
		_categories = await categoryRepo.GetCategoriesAsync();
		_statuses = await statusRepo.GetStatusesAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await LoadFilterStateAsync();
			await FilterPostsAsync();
			StateHasChanged();
		}
	}

	private async Task LoadFilterStateAsync()
	{
		_selectedCategory = await GetFromSessionStorageAsync(nameof(_selectedCategory), CategoryModel.All);
		_selectedStatus = await GetFromSessionStorageAsync(nameof(_selectedStatus), StatusModel.None);
		_searchText = await GetFromSessionStorageAsync(nameof(_searchText), "");
		_sortOption = await GetFromSessionStorageAsync(nameof(_sortOption), SortOption.ByNew);
	}

	private async Task<TResult> GetFromSessionStorageAsync<TResult>(string key, TResult defaultValue)
	{
		var result = await sessionStorage.GetAsync<TResult>(key);
		TResult output = result.Success ? result.Value : defaultValue;

		return output;
	}

	private async Task SaveFilterStateAsync()
	{
		await sessionStorage.SetAsync(nameof(_selectedCategory), _selectedCategory);
		await sessionStorage.SetAsync(nameof(_selectedStatus), _selectedStatus);
		await sessionStorage.SetAsync(nameof(_searchText), _searchText);
		await sessionStorage.SetAsync(nameof(_sortOption), _sortOption);	
	}

	private async Task FilterPostsAsync()
	{
		IEnumerable<PostModel> posts = await postRepo.GetPostsAsync(ApprovalStatus.Approved);

		if (_selectedCategory != CategoryModel.All)
		{
			posts = posts.Where(p => p.Category?.CategoryName == _selectedCategory);
		}

		if (_selectedStatus != StatusModel.None)
		{
			posts = posts.Where(p => p.Status?.StatusName == _selectedStatus);
		}

		if (!string.IsNullOrWhiteSpace(_searchText))
		{
			posts = posts.Where(
					p => p.Title.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase)
						|| p.Description.Contains(_searchText, StringComparison.InvariantCultureIgnoreCase));
		}

		switch (_sortOption)
		{
			case SortOption.ByNew:
				posts = posts.OrderByDescending(p => p.DateCreated);
				break;

			case SortOption.ByPopular:
				posts = posts.OrderByDescending(p => p.UserVotes.Count)
					.ThenByDescending(p => p.DateCreated);	
				break;

			default:
				throw new NotImplementedException($"The case for "
				+ $"SortOption \'{Enum.GetName(_sortOption)}\' is not yet implemented.");
		}

		this._posts = posts.ToList();

		await SaveFilterStateAsync();
	}

	private async Task OrderPostsByAsync(SortOption option)
	{
		_sortOption = option;
		await FilterPostsAsync();

		Log.Information($"Ordering posts by {nameof(SortOption)}: {Enum.GetName(option)}");
	}

	private async Task OnCategoryClickAsync(string category)
	{
		_selectedCategory = category;
		await FilterPostsAsync();

		Log.Information($"Choosing category: {category}");
	}

	private async Task OnStatusClickAsync(string status)
	{
		_selectedStatus = status;
		await FilterPostsAsync();

		Log.Information($"Choosing status {status}");
	}

	private async Task OnSearchBarInputAsync(string input)
	{
		_searchText = input;
		await FilterPostsAsync();

		Log.Information("Searching for {searchText}", _searchText);
	}

	private string UpvoteTopText(PostModel post)
	{
		if (post.UserVotes.Count > 0)
		{
			return post.UserVotes.Count.ToString("00");
		}
		else
		{
			return "Click To";
		}
	}

	private string UpvoteBottomText(PostModel post)
	{
		if (post.UserVotes.Count > 1)
		{
			return "Upvotes";
		}
		else
		{
			return "Upvote";
		}
	}

	private void OpenPostDetails(PostModel post)
	{
		Log.Information("Displaying details of post of Id={postId}", post.Id);

		navigation.NavigateTo($"/Details/{post.Id}");
	}
}


 
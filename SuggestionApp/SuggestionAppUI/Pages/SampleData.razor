@page "/SampleData"
@inject ICategoryRepository categoryRepo
@inject IStatusRepository statusRepo
@inject IUserRepository userRepo
@inject IPostRepository postRepo

<h3>Sample Data</h3>

@if (_categoriesCreated)
{
	<h4>Categories have been created.</h4>
}
else
{
	<button class="btn btn-primary" @onclick="CreateCategories">Create Categories</button>
}

@if (_statusesCreated)
{
	<h4>Statueses have been created.</h4>
}
else
{
	<button class="btn btn-primary" @onclick="CreateStatuses">Create Statuses</button>
}

<button class="btn btn-primary" @onclick="CreateSamplePosts">Create Sample Posts</button>


@code {
	private bool _categoriesCreated = false;
	private bool _statusesCreated = false;

	private async Task CreateSamplePosts()
	{
		var user = new UserModel
		{
			FirstName = "Yousef",
			LastName = "Kilany",
			DisplayName = "Sample User",
			EmailAddress = "kdev@csharp.net",
			ObjectIdentifier = "abc-555"
		};

		await userRepo.CreateUserAsync(user);

		user = await userRepo.GetUserFromAuthenticationAsync("abc-555");

		var votes = new HashSet<string>
		{
			"1",
			"2",
			"3",
		};

		var categories = await categoryRepo.GetCategoriesAsync();
		var statuses = await statusRepo.GetStatusesAsync();

		await postRepo.CreatePostAsync(new PostModel
		{
			Author = new PostAuthorViewModel(user),
			Category = categories[0],
			Title = "First Post",
			Description = "This is a sample post to test out the site."
		});
		await postRepo.CreatePostAsync(new PostModel
		{
			Author = new PostAuthorViewModel(user),
			Category = categories[1],
			Title = "Second Post",
			Description = "This is a sample post to test out the site.",
			Status = statuses[0],
			AdminNotes = "This is the admin note."
		});
		await postRepo.CreatePostAsync(new PostModel
		{
			Author = new PostAuthorViewModel(user),
			Category = categories[2],
			Title = "Third Post",
			Description = "This is a sample post to test out the site.",
			Status = statuses[1],
			AdminNotes = "This is the admin note."
		});
		await postRepo.CreatePostAsync(new PostModel
		{
			Author = new PostAuthorViewModel(user),
			Category = categories[3],
			Title = "A Post",
			Description = "This is a sample post to test out the site.",
			Status = statuses[2],
			UserVotes = votes,
			AdminNotes = "This is the admin note."
		});

		votes.Add("555");

		await postRepo.CreatePostAsync(new PostModel
		{
			Author = new PostAuthorViewModel(user),
			Category = categories[4],
			Title = "Not Counting Anymore Post",
			Description = "This is a sample post to test out the site.",
			Status = statuses[3],
			UserVotes = votes,
			AdminNotes = "This is the admin note."
		});
	}

	private async Task CreateCategories()
	{
		List<CategoryModel> categories = await categoryRepo.GetCategoriesAsync();

		if (categories?.Count > 0)
		{
			_categoriesCreated = true;
			return;
		}

		await categoryRepo.CreateCategory(new CategoryModel
			{
				CategoryName = "Courses",
				CategoryDescription = "Full paid courses."
			});
		await categoryRepo.CreateCategory(new CategoryModel
			{
				CategoryName = "Dev Questions",
				CategoryDescription = "Advice on being a developer."
			});
		await categoryRepo.CreateCategory(new CategoryModel
			{
				CategoryName = "In-Depth Tutorial",
				CategoryDescription = "A deep-dive video on how to use a topic."
			});
		await categoryRepo.CreateCategory(new CategoryModel
			{
				CategoryName = "10-Minute Training",
				CategoryDescription = "A quick \"How do I use this?\" video."
			});
		await categoryRepo.CreateCategory(new CategoryModel
			{
				CategoryName = "Other",
				CategoryDescription = "Not sure which category this fits in."
			});

		_categoriesCreated = true;
	}

	private async Task CreateStatuses()
	{
		var statuses = await statusRepo.GetStatusesAsync();

		if (statuses?.Count > 0)
		{
			_statusesCreated = true;
			return;
		}

		await statusRepo.CreateStatus(new StatusModel
			{
				StatusName = "Completed",
				StatusDescription = "The suggestion was accepted and the corresponding item was created."
			});
		await statusRepo.CreateStatus(new StatusModel
			{
				StatusName = "Watching",
				StatusDescription = "The suggestion is interesting. We are watching to see how much interest there is in it."
			});
		await statusRepo.CreateStatus(new StatusModel
			{
				StatusName = "Upcoming",
				StatusDescription = "The suggestion was accepted and an item will be released soon."
			});
		await statusRepo.CreateStatus(new StatusModel
			{
				StatusName = "Dismissed",
				StatusDescription = "The suggestion was not something that we are going to undertake."
			});

		_statusesCreated = true;
	}
}
